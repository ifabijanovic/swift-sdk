//
//  KCSRealmTests.m
//  KinveyKit
//
//  Created by Victor Barros on 2015-11-23.
//  Copyright Â© 2015 Kinvey. All rights reserved.
//

#import "KCSTestCase.h"
#import <KinveyKit/KinveyKit.h>

#import "KCSPerson.h"

@interface KCSRealmTests : KCSTestCase

@property (nonatomic, strong) KCSCollection* collectionPerson;
@property (nonatomic, strong) id<KCSStore> storePerson;

@property (nonatomic, strong) KCSCollection* collectionAddress;
@property (nonatomic, strong) id<KCSStore> storeAddress;

@property (nonatomic, readonly) KCSPerson* person;
@property (nonatomic, readonly) KCSAddress* address;

@end

@implementation KCSRealmTests

- (void)setUp {
    [super setUp];
    
    [self setupKCS];
    [self createAutogeneratedUser];
    
    self.collectionPerson = [KCSCollection collectionFromString:@"person"
                                                        ofClass:[KCSPerson class]];
    self.storePerson = [KCSLinkedAppdataStore storeWithCollection:self.collectionPerson
                                                          options:@{ KCSStoreKeyCachePolicy : @(KCSCachePolicyLocalFirst) }];
    
    self.collectionAddress = [KCSCollection collectionFromString:@"Address"
                                                         ofClass:[KCSAddress class]];
    self.storeAddress = [KCSLinkedAppdataStore storeWithCollection:self.collectionAddress
                                                           options:@{ KCSStoreKeyCachePolicy : @(KCSCachePolicyLocalFirst) }];
}

- (void)tearDown {
    [self removeAndLogoutActiveUser:30];
    
    [super tearDown];
}

-(KCSAddress *)address
{
    KCSAddress* address = [[KCSAddress alloc] init];
    address.city = @"Vancouver";
    address.province = @"BC";
    address.country = @"Canada";
    return address;
}

-(KCSPerson *)person
{
    KCSPerson* person = [[KCSPerson alloc] init];
    person.name = @"Victor";
    person.age = 29;
    person.address = self.address;
    return person;
}

- (void)testRealmSave {
    KCSPerson* person = self.person;
    KCSAddress* address = person.address;
    
    __block __weak XCTestExpectation* expectationSaveAddress = [self expectationWithDescription:@"saveAddress"];
    
    [self.storeAddress saveObject:address
       withCompletionBlock:^(NSArray<KCSAddress*> *objectsOrNil, NSError *errorOrNil)
     {
         XCTAssertNotNil(objectsOrNil);
         XCTAssertNil(errorOrNil);
         XCTAssertEqual(objectsOrNil.count, 1);
         if (objectsOrNil.count > 0) {
             KCSAddress* _address = objectsOrNil.firstObject;
             XCTAssertTrue([_address isKindOfClass:[KCSAddress class]]);
             XCTAssertEqualObjects(address.city, _address.city);
             XCTAssertEqualObjects(address.province, _address.province);
             XCTAssertEqualObjects(address.country, _address.country);
         }
         
         [expectationSaveAddress fulfill];
     } withProgressBlock:nil];
    
    [self waitForExpectationsWithTimeout:30
                                 handler:^(NSError * _Nullable error)
     {
         expectationSaveAddress = nil;
     }];
    
    __block __weak XCTestExpectation* expectationSavePerson = [self expectationWithDescription:@"savePerson"];
    
    [self.storePerson saveObject:person
       withCompletionBlock:^(NSArray<KCSPerson*> *objectsOrNil, NSError *errorOrNil)
    {
        XCTAssertNotNil(objectsOrNil);
        XCTAssertNil(errorOrNil);
        XCTAssertEqual(objectsOrNil.count, 1);
        if (objectsOrNil.count > 0) {
            KCSPerson* _person = objectsOrNil.firstObject;
            XCTAssertTrue([_person isKindOfClass:[KCSPerson class]]);
            XCTAssertEqualObjects(person.name, _person.name);
            XCTAssertEqual(person.age, _person.age);
            XCTAssertNotNil(_person.address);
            XCTAssertTrue([_person.address isKindOfClass:[KCSAddress class]]);
            if ([_person.address isKindOfClass:[KCSAddress class]]) {
                XCTAssertEqualObjects(person.address.city, _person.address.city);
                XCTAssertEqualObjects(person.address.province, _person.address.province);
                XCTAssertEqualObjects(person.address.country, _person.address.country);
            }
        }
        
        [expectationSavePerson fulfill];
    } withProgressBlock:nil];
    
    [self waitForExpectationsWithTimeout:30
                                 handler:^(NSError * _Nullable error)
    {
        expectationSavePerson = nil;
    }];
}

-(void)testRealmQuery {
    [self testRealmSave];
    
    KCSPerson* person = self.person;
    
    __block __weak XCTestExpectation* expectationQueryPerson = [self expectationWithDescription:@"queryPerson"];
    
    KCSQuery* query = [KCSQuery queryWithPredicate:[NSPredicate predicateWithFormat:@"name == %@ AND _acl.creator == %@", person.name, [KCSUser activeUser].userId]];
    [self.storePerson queryWithQuery:query
                 withCompletionBlock:^(NSArray<KCSPerson*> *objectsOrNil, NSError *errorOrNil)
    {
        XCTAssertNotNil(objectsOrNil);
        XCTAssertNil(errorOrNil);
        XCTAssertEqual(objectsOrNil.count, 1);
        if (objectsOrNil.count > 0) {
            KCSPerson* _person = objectsOrNil.firstObject;
            XCTAssertTrue([_person isKindOfClass:[KCSPerson class]]);
            XCTAssertEqualObjects(person.name, _person.name);
            XCTAssertEqual(person.age, _person.age);
            XCTAssertNotNil(_person.address);
            XCTAssertTrue([_person.address isKindOfClass:[KCSAddress class]]);
            if ([_person.address isKindOfClass:[KCSAddress class]]) {
                XCTAssertEqualObjects(person.address.city, _person.address.city);
                XCTAssertEqualObjects(person.address.province, _person.address.province);
                XCTAssertEqualObjects(person.address.country, _person.address.country);
            }
        }
        
        [expectationQueryPerson fulfill];
    } withProgressBlock:nil];
    
    [self waitForExpectationsWithTimeout:30
                                 handler:^(NSError * _Nullable error)
    {
        expectationQueryPerson = nil;
    }];
}

@end
